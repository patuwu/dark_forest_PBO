package dark_forest;
import javax.swing.*;
import java.util.Arrays;
import java.util.Random;
import java.util.ArrayList;
import java.util.HashSet;
import java.awt.*;
import java.awt.image.BufferedImage;
import javax.imageio.ImageIO;
import java.awt.event.*;
import java.sql.*;
import java.io.IOException;



public class Game extends javax.swing.JFrame {

    private static final int IFW = JComponent.WHEN_IN_FOCUSED_WINDOW;
    public Timer refreshPlayer;
    public int playerGridCheck;
    public ActionListener refPlay;
    public BufferedImage model, enemy_models, combat_bg, map_bg, tree, start_button, combat_button;
    public ImageIcon background;
    public Menu menu = new Menu();
    final Random rnd = new Random();
    public Mapping mapping;
    public Player player;
    public Enemy target;
    public Connection conn;
    public PreparedStatement prep;
    public CardLayout panelSwitch;
            
    public Game(Connection conn){
        this.conn = conn;
        player = new Player(1, 0, this.conn);
        target = new Enemy(1, 0, this.conn);
        mapping = new Mapping(this.conn);
        background = new ImageIcon(new ImageIcon(getClass().getResource("/sprites/background_menu.png")).getImage());
        
        try{
        model = (ImageIO.read(this.getClass().getResource("/sprites/player.png")));
        tree = (ImageIO.read(this.getClass().getResource("/sprites/tree.png")));
        combat_bg = (ImageIO.read(this.getClass().getResource("/sprites/battle_ground.png")));
        map_bg = (ImageIO.read(this.getClass().getResource("/sprites/map_ground.png")));
        enemy_models = (ImageIO.read(this.getClass().getResource("/sprites/enemy.png")));
        start_button = (ImageIO.read(this.getClass().getResource("/sprites/button_menu.png")));
        combat_button = (ImageIO.read(this.getClass().getResource("/sprites/button_combat.png")));
        
        
        }catch (IOException ex) {
            ex.printStackTrace();
            
            
        }
        
        initComponents();     
        
        refreshPlayer = new Timer(30, new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                if(playerGridCheck != player.getGrid()){
                    Player_loc.repaint();
                    Player_loc.paintComponents(Player_loc.getGraphics());
                    playerGridCheck = player.getGrid();
                }
            }
            
        });
        refreshPlayer.start();
        
        validate();
    }

    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Main_Window = new javax.swing.JPanel();
        Start = new javax.swing.JPanel();
        BPlay = new javax.swing.JButton();
        BLoad = new javax.swing.JButton();
        BExit = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        Combat = new javax.swing.JPanel();
        e_HPBar = new javax.swing.JProgressBar();
        Reward = new javax.swing.JPanel();
        expbar = new javax.swing.JProgressBar();
        exp_count = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        close_reward = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        Actions = new javax.swing.JPanel();
        Attack_c = new javax.swing.JButton();
        Spell_c = new javax.swing.JButton();
        Defend = new javax.swing.JButton();
        Heal = new javax.swing.JButton();
        Esc = new javax.swing.JButton();
        Attack = new javax.swing.JPanel();
        Normal_A = new javax.swing.JButton();
        Swift_A = new javax.swing.JButton();
        Heavy_A = new javax.swing.JButton();
        Cancel_A = new javax.swing.JButton();
        Spell = new javax.swing.JPanel();
        Fire_S = new javax.swing.JButton();
        Ice_S = new javax.swing.JButton();
        Light_S = new javax.swing.JButton();
        Cancel_S = new javax.swing.JButton();
        p_MPBar = new javax.swing.JProgressBar();
        p_HPBar = new javax.swing.JProgressBar();
        jPanel2 = new javax.swing.JPanel();
        Combat_screen = new combat_scr();
        E_Name = new javax.swing.JLabel();
        Adventure = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        Player_loc = new player_dot();
        People = new peoples();
        Map = new map();
        Loading = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        progress = new javax.swing.JLabel();
        Dead = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        Reset = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Dark");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(false);
        setSize(new java.awt.Dimension(640, 480));

        Main_Window.setOpaque(false);
        Main_Window.setLayout(new java.awt.CardLayout());

        Start.setPreferredSize(new java.awt.Dimension(640, 480));
        Start.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        BPlay.setBackground(new java.awt.Color(60, 63, 63));
        BPlay.setForeground(new java.awt.Color(204, 204, 204));
        BPlay.setAlignmentY(0.0F);
        BPlay.setBorder(null);
        BPlay.setBorderPainted(false);
        BPlay.setContentAreaFilled(false);
        BPlay.setOpaque(false);
        BPlay.setIcon(new ImageIcon(start_button.getSubimage(500, 0, 250, 50)));
        BPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BPlayActionPerformed(evt);
            }
        });
        Start.add(BPlay, new org.netbeans.lib.awtextra.AbsoluteConstraints(195, 170, 250, 50));

        BLoad.setBackground(new java.awt.Color(60, 63, 63));
        BLoad.setForeground(new java.awt.Color(204, 204, 204));
        BLoad.setAlignmentY(0.0F);
        BLoad.setBorder(null);
        BLoad.setBorderPainted(false);
        BLoad.setContentAreaFilled(false);
        BLoad.setIconTextGap(0);
        BLoad.setOpaque(false);
        BLoad.setIcon(new ImageIcon(start_button.getSubimage(250, 0, 250, 50)));
        BLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BLoadActionPerformed(evt);
            }
        });
        Start.add(BLoad, new org.netbeans.lib.awtextra.AbsoluteConstraints(195, 240, 250, 50));

        BExit.setBackground(new java.awt.Color(60, 63, 63));
        BExit.setForeground(new java.awt.Color(204, 204, 204));
        BExit.setBorder(null);
        BExit.setBorderPainted(false);
        BExit.setContentAreaFilled(false);
        BExit.setIconTextGap(0);
        BExit.setMaximumSize(new java.awt.Dimension(250, 50));
        BExit.setMinimumSize(new java.awt.Dimension(250, 50));
        BExit.setOpaque(false);
        BExit.setPreferredSize(new java.awt.Dimension(250, 50));
        BExit.setIcon(new ImageIcon(start_button.getSubimage(0, 0, 250, 50)));
        BExit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BExitMouseClicked(evt);
            }
        });
        Start.add(BExit, new org.netbeans.lib.awtextra.AbsoluteConstraints(195, 310, 250, 50));

        jLabel1.setFont(new java.awt.Font("Panton Black Caps", 0, 48)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sprites/title.png"))); // NOI18N
        Start.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(145, 67, 360, 70));

        jLabel2.setIcon(background);
        jLabel2.setIconTextGap(0);
        Start.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 640, 480));

        Main_Window.add(Start, "panelS");

        Combat.setMinimumSize(new java.awt.Dimension(640, 480));
        Combat.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        e_HPBar.setBackground(new java.awt.Color(0, 0, 0));
        e_HPBar.setForeground(new java.awt.Color(255, 255, 255));
        e_HPBar.setValue((target.getHP()*100/target.getmax_HP()));
        Combat.add(e_HPBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 60, 130, 10));

        Reward.setVisible(false);
        Reward.setBackground(new java.awt.Color(0, 0, 0));
        Reward.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 5));
        Reward.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        expbar.setBackground(new java.awt.Color(0, 0, 0));
        expbar.setForeground(new java.awt.Color(255, 255, 255));
        expbar.setValue((player.getEXP()*100/player.getEXP_N()));
        Reward.add(expbar, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 80, 260, 10));

        exp_count.setFont(new java.awt.Font("Courier New", 1, 10)); // NOI18N
        exp_count.setForeground(new java.awt.Color(255, 255, 255));
        exp_count.setText(player.getEXP() + " / " + player.getEXP_N());
        Reward.add(exp_count, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 90, 260, 20));

        jLabel7.setFont(new java.awt.Font("Courier New", 1, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("EXP");
        Reward.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 80, 40, 30));

        close_reward.setBackground(new java.awt.Color(0, 0, 0));
        close_reward.setText("OK");
        close_reward.setOpaque(false);
        close_reward.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                close_rewardActionPerformed(evt);
            }
        });
        Reward.add(close_reward, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 140, -1, -1));

        Combat.add(Reward, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 140, 360, 190));

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));
        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 2, true));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Actions.setBackground(new java.awt.Color(0, 0, 0));
        Actions.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 2, true));
        Actions.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Attack_c.setBackground(new java.awt.Color(0, 0, 0));
        Attack_c.setIcon(new ImageIcon(combat_button.getSubimage(0, 0, 90, 42)));
        Attack_c.setBorder(null);
        Attack_c.setBorderPainted(false);
        Attack_c.setContentAreaFilled(false);
        Attack_c.setIconTextGap(0);
        Attack_c.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Attack_cActionPerformed(evt);
            }
        });
        Actions.add(Attack_c, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 11, 90, 42));

        Spell_c.setIcon(new ImageIcon(combat_button.getSubimage(90, 0, 90, 42)));
        Spell_c.setBorder(null);
        Spell_c.setBorderPainted(false);
        Spell_c.setContentAreaFilled(false);
        Spell_c.setFocusable(false);
        Spell_c.setIconTextGap(0);
        Spell_c.setOpaque(false);
        Spell_c.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Spell_cActionPerformed(evt);
            }
        });
        Actions.add(Spell_c, new org.netbeans.lib.awtextra.AbsoluteConstraints(118, 11, 90, 42));

        Defend.setIcon(new ImageIcon(combat_button.getSubimage(180, 0, 90, 42)));
        Defend.setBorder(null);
        Defend.setBorderPainted(false);
        Defend.setContentAreaFilled(false);
        Defend.setIconTextGap(0);
        Defend.setOpaque(false);
        Defend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DefendActionPerformed(evt);
            }
        });
        Actions.add(Defend, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 71, 90, 42));

        Heal.setIcon(new ImageIcon(combat_button.getSubimage(0, 42, 90, 42)));
        Heal.setBorder(null);
        Heal.setBorderPainted(false);
        Heal.setContentAreaFilled(false);
        Heal.setIconTextGap(0);
        Heal.setOpaque(false);
        Heal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HealActionPerformed(evt);
            }
        });
        Actions.add(Heal, new org.netbeans.lib.awtextra.AbsoluteConstraints(118, 71, 90, 42));

        Esc.setIcon(new ImageIcon(combat_button.getSubimage(90, 42, 90, 42)));
        Esc.setToolTipText("");
        Esc.setBorder(null);
        Esc.setBorderPainted(false);
        Esc.setContentAreaFilled(false);
        Esc.setIconTextGap(0);
        Esc.setOpaque(false);
        Actions.add(Esc, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 130, 90, 42));

        jPanel1.add(Actions, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 230, 190));

        Attack.setBackground(new java.awt.Color(0, 0, 0));
        Attack.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 2, true));
        Attack.setVisible(false);
        Attack.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Normal_A.setBorder(null);
        Normal_A.setBorderPainted(false);
        Normal_A.setContentAreaFilled(false);
        Normal_A.setIconTextGap(0);
        Normal_A.setOpaque(false);
        Normal_A.setIcon(new ImageIcon(combat_button.getSubimage(0, 84, 90, 42)));
        Normal_A.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Normal_AActionPerformed(evt);
            }
        });
        Attack.add(Normal_A, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 11, 90, 42));

        Swift_A.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Swift_A.setBorderPainted(false);
        Swift_A.setContentAreaFilled(false);
        Swift_A.setIconTextGap(0);
        Swift_A.setOpaque(false);
        Swift_A.setIcon(new ImageIcon(combat_button.getSubimage(90, 84, 90, 42)));
        Swift_A.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Swift_AActionPerformed(evt);
            }
        });
        Attack.add(Swift_A, new org.netbeans.lib.awtextra.AbsoluteConstraints(118, 11, 90, 42));

        Heavy_A.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Heavy_A.setBorderPainted(false);
        Heavy_A.setContentAreaFilled(false);
        Heavy_A.setIconTextGap(0);
        Heavy_A.setOpaque(false);
        Heavy_A.setIcon(new ImageIcon(combat_button.getSubimage(180, 84, 90, 42)));
        Heavy_A.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Heavy_AActionPerformed(evt);
            }
        });
        Attack.add(Heavy_A, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 71, 90, 42));

        Cancel_A.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Cancel_A.setBorderPainted(false);
        Cancel_A.setContentAreaFilled(false);
        Cancel_A.setIconTextGap(0);
        Cancel_A.setOpaque(false);
        Cancel_A.setIcon(new ImageIcon(combat_button.getSubimage(180, 42, 90, 42)));
        Cancel_A.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Cancel_AActionPerformed(evt);
            }
        });
        Attack.add(Cancel_A, new org.netbeans.lib.awtextra.AbsoluteConstraints(118, 71, 90, 42));

        jPanel1.add(Attack, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 230, 190));

        Spell.setBackground(new java.awt.Color(0, 0, 0));
        Spell.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 2, true));
        Spell.setVisible(false);
        Spell.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Fire_S.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Fire_S.setBorderPainted(false);
        Fire_S.setContentAreaFilled(false);
        Fire_S.setIconTextGap(0);
        Fire_S.setOpaque(false);
        Fire_S.setIcon(new ImageIcon(combat_button.getSubimage(0, 126, 90, 42)));
        Fire_S.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Fire_SActionPerformed(evt);
            }
        });
        Spell.add(Fire_S, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 11, 90, 42));

        Ice_S.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Ice_S.setBorderPainted(false);
        Ice_S.setContentAreaFilled(false);
        Ice_S.setIconTextGap(0);
        Ice_S.setOpaque(false);
        Ice_S.setIcon(new ImageIcon(combat_button.getSubimage(90, 126, 90, 42)));
        Ice_S.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Ice_SActionPerformed(evt);
            }
        });
        Spell.add(Ice_S, new org.netbeans.lib.awtextra.AbsoluteConstraints(118, 11, 90, 42));

        Light_S.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Light_S.setBorderPainted(false);
        Light_S.setContentAreaFilled(false);
        Light_S.setIconTextGap(0);
        Light_S.setOpaque(false);
        Light_S.setIcon(new ImageIcon(combat_button.getSubimage(180, 126, 90, 42)));
        Light_S.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Light_SActionPerformed(evt);
            }
        });
        Spell.add(Light_S, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 71, 90, 42));

        Cancel_S.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Cancel_S.setBorderPainted(false);
        Cancel_S.setContentAreaFilled(false);
        Cancel_S.setIconTextGap(0);
        Cancel_S.setOpaque(false);
        Cancel_S.setIcon(new ImageIcon(combat_button.getSubimage(180, 42, 90, 42)));
        Cancel_S.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Cancel_SActionPerformed(evt);
            }
        });
        Spell.add(Cancel_S, new org.netbeans.lib.awtextra.AbsoluteConstraints(118, 71, 90, 42));

        jPanel1.add(Spell, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 230, 190));

        p_MPBar.setBackground(new java.awt.Color(0, 0, 0));
        p_MPBar.setForeground(new java.awt.Color(0, 204, 204));
        p_MPBar.setValue((player.getMP()*100/player.getmax_MP()));
        jPanel1.add(p_MPBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 50, 190, 10));

        p_HPBar.setBackground(new java.awt.Color(0, 0, 0));
        p_HPBar.setForeground(new java.awt.Color(0, 102, 51));
        p_HPBar.setValue((player.getHP()*100/player.getmax_HP()));
        jPanel1.add(p_HPBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 20, 310, -1));

        Combat.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 290, 640, 190));

        jPanel2.setBackground(new java.awt.Color(0, 0, 0));
        jPanel2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 2, true));
        Combat.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 640, 50));

        Combat_screen.setOpaque(false);
        Combat_screen.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        E_Name.setBackground(new java.awt.Color(255, 255, 255));
        E_Name.setFont(new java.awt.Font("Tw Cen MT Condensed", 1, 12)); // NOI18N
        E_Name.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        E_Name.setText(target.getName());
        E_Name.setOpaque(true);
        Combat_screen.add(E_Name, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 20, 170, -1));

        Combat.add(Combat_screen, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 50, 640, 240));

        Main_Window.add(Combat, "panelC");

        Adventure.setMinimumSize(new java.awt.Dimension(640, 480));
        Adventure.setPreferredSize(new java.awt.Dimension(640, 480));
        Adventure.getInputMap(IFW).put(KeyStroke.getKeyStroke("UP"), "go up");
        Adventure.getInputMap(IFW).put(KeyStroke.getKeyStroke("DOWN"), "go down");
        Adventure.getInputMap(IFW).put(KeyStroke.getKeyStroke("LEFT"), "go left");
        Adventure.getInputMap(IFW).put(KeyStroke.getKeyStroke("RIGHT"), "go right");

        Adventure.getActionMap().put("go up", new traverse(-8,1));
        Adventure.getActionMap().put("go down", new traverse(8,2));
        Adventure.getActionMap().put("go left", new traverse(-1,3));
        Adventure.getActionMap().put("go right", new traverse(1,4));
        Adventure.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel3.setBackground(new java.awt.Color(0, 0, 0));
        jPanel3.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 2, true));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 636, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 76, Short.MAX_VALUE)
        );

        Adventure.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 410, 640, 80));

        jPanel4.setBackground(new java.awt.Color(0, 0, 0));
        jPanel4.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 2, true));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 636, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 36, Short.MAX_VALUE)
        );

        Adventure.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -10, 640, 40));

        Player_loc.setOpaque(false);

        javax.swing.GroupLayout Player_locLayout = new javax.swing.GroupLayout(Player_loc);
        Player_loc.setLayout(Player_locLayout);
        Player_locLayout.setHorizontalGroup(
            Player_locLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 640, Short.MAX_VALUE)
        );
        Player_locLayout.setVerticalGroup(
            Player_locLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );

        Adventure.add(Player_loc, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 20, -1, -1));

        People.setOpaque(false);

        javax.swing.GroupLayout PeopleLayout = new javax.swing.GroupLayout(People);
        People.setLayout(PeopleLayout);
        PeopleLayout.setHorizontalGroup(
            PeopleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 640, Short.MAX_VALUE)
        );
        PeopleLayout.setVerticalGroup(
            PeopleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );

        Adventure.add(People, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 20, -1, -1));

        Map.setBackground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout MapLayout = new javax.swing.GroupLayout(Map);
        Map.setLayout(MapLayout);
        MapLayout.setHorizontalGroup(
            MapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 640, Short.MAX_VALUE)
        );
        MapLayout.setVerticalGroup(
            MapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );

        Adventure.add(Map, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 20, -1, -1));

        Main_Window.add(Adventure, "panelA");

        Loading.setBackground(new java.awt.Color(0, 0, 0));
        Loading.setMinimumSize(new java.awt.Dimension(640, 480));
        Loading.setPreferredSize(new java.awt.Dimension(640, 480));
        Loading.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel3.setFont(new java.awt.Font("Tw Cen MT", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("LOADING");
        Loading.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 226, -1, -1));

        progress.setFont(new java.awt.Font("Courier New", 0, 11)); // NOI18N
        progress.setForeground(new java.awt.Color(255, 255, 255));
        progress.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        progress.setText(" ");
        Loading.add(progress, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 260, 240, -1));

        Main_Window.add(Loading, "panelL");

        Dead.setBackground(new java.awt.Color(0, 0, 0));
        Dead.setMinimumSize(new java.awt.Dimension(640, 480));
        Dead.setPreferredSize(new java.awt.Dimension(640, 480));
        Dead.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel4.setFont(new java.awt.Font("Tw Cen MT", 1, 36)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("GAME OVER");
        Dead.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(221, 82, -1, -1));

        Reset.setBackground(new java.awt.Color(0, 0, 0));
        Reset.setFont(new java.awt.Font("Tw Cen MT", 1, 12)); // NOI18N
        Reset.setForeground(new java.awt.Color(255, 255, 255));
        Reset.setText("RESET");
        Reset.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 3, true));
        Reset.setContentAreaFilled(false);
        Reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResetActionPerformed(evt);
            }
        });
        Dead.add(Reset, new org.netbeans.lib.awtextra.AbsoluteConstraints(242, 329, 154, 33));

        Main_Window.add(Dead, "panelD");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(Main_Window, javax.swing.GroupLayout.PREFERRED_SIZE, 640, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(Main_Window, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        setSize(new java.awt.Dimension(656, 518));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void BExitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BExitMouseClicked
        this.dispose();
    }//GEN-LAST:event_BExitMouseClicked

    private class map extends JPanel{
        int i, j, room;
        
        @Override
        public void paintComponent(Graphics g){
            super.paintComponent(g);
            g.drawImage(map_bg, 0, 0, this);
            room = player.getRoom();
            mapping.updateGrid(room);
            try{
                
            prep = conn.prepareStatement("SELECT * FROM Grid");
            ResultSet stat = prep.executeQuery();            
            
            while(stat.next()){      
            i = 0;
            j = stat.getInt("grid") - (i*8);
            
            while(j >= 8){
                i++;
                j = stat.getInt("grid") - (i*8); }
                
            if(stat.getBoolean("is_Passable") == false){
            g.drawImage(tree, 80*j, (50*i)-35, this);
            }          
            
            }}catch (SQLException ex)
                    {System.out.println("error");}
            
        }
    }
    
    private class peoples extends JPanel{
        int i, j, room, enemyID;
                
        @Override
        public void paintComponent(Graphics g){
            super.paintComponent(g);
            room = player.getRoom();
            try{
            PreparedStatement prepcheck = conn.prepareStatement("SELECT * FROM Entity WHERE room = (?) AND Ent_ID != 1");
            PreparedStatement prepenemy = conn.prepareStatement("SELECT En_type FROM Enemy WHERE Ent_ID = (?)");
            prepcheck.setInt(1, room);
            ResultSet check = prepcheck.executeQuery();
            
            
            while(check.next()){  
            prepenemy.setInt(1, check.getInt("Ent_ID"));
            enemyID = prepenemy.executeQuery().getInt("En_type");
            g.setColor(Color.RED);

            i = 0;
            j = check.getInt("grid") - (i*8);
            
            while(j >= 8){
                i++;
                j = check.getInt("grid") - (i*8);
            }                
            switch(enemyID){
                case 0 : g.drawImage(enemy_models.getSubimage(0, 0, 40, 40), 20+80*j, 5+50*i, this); break;
                case 1 : g.drawImage(enemy_models.getSubimage(40, 0, 40, 40), 20+80*j, 5+50*i, this); break;
                case 2 : g.drawImage(enemy_models.getSubimage(80, 0, 40, 40), 20+80*j, 5+50*i, this); break;
                case 3 : g.drawImage(enemy_models.getSubimage(0, 40, 40, 40), 20+80*j, 5+50*i, this); break;
                case 4 : g.drawImage(enemy_models.getSubimage(40, 40, 40, 40), 20+80*j, 5+50*i, this); break;
            }
            }            
            }catch (SQLException ex)
            {System.out.println("error");}   
            
        }
    }
    
    private class player_dot extends JPanel{
        int i, j;
                
        @Override
        public void paintComponent(Graphics g){
            super.paintComponent(g);        
            i = 0;
            j = player.getGrid() - (i*8);
            
            while(j >= 8){
                i++;
                j = player.getGrid() - (i*8);
            }
                         
            g.drawImage(model.getSubimage(0, 0, 40, 40), 20+80*j, 5+50*i, this);
        }
    }
    
    public class combat_scr extends JPanel{
                
        @Override
        public void paintComponent(Graphics g){
            super.paintComponent(g);        
            g.drawImage(combat_bg, 0, 0, this);                                     
            g.drawImage(model.getSubimage(0, 0, 40, 40).getScaledInstance(150, 150, Image.SCALE_FAST), 60, 60, this);
            switch(target.getEType()){
                case 0 : g.drawImage(enemy_models.getSubimage(0, 0, 40, 40).getScaledInstance(150, 150, Image.SCALE_FAST), 470, 60, this); break;
                case 1 : g.drawImage(enemy_models.getSubimage(40, 0, 40, 40).getScaledInstance(150, 150, Image.SCALE_FAST), 470, 60, this); break;
                case 2 : g.drawImage(enemy_models.getSubimage(80, 0, 40, 40).getScaledInstance(150, 150, Image.SCALE_FAST), 470, 60, this); break;
                case 3 : g.drawImage(enemy_models.getSubimage(0, 40, 40, 40).getScaledInstance(150, 150, Image.SCALE_FAST), 470, 60, this); break;
                case 4 : g.drawImage(enemy_models.getSubimage(40, 40, 40, 40).getScaledInstance(150, 150, Image.SCALE_FAST), 470, 60, this); break;
            }
        }
    }
        
    private void resetRun(){
        try{
            Statement stm = conn.createStatement();
            
            stm.executeUpdate("DELETE FROM Rooms");
            stm.executeUpdate("DELETE FROM Grid");
            stm.executeUpdate("DELETE FROM Entity");
            stm.executeUpdate("DELETE FROM Player");
            stm.executeUpdate("DELETE FROM Enemy");       
        } catch (SQLException ex)
            {
                System.out.println("delete error");
                ex.printStackTrace();
            }
    }
       
    private void checkChange(){
        p_HPBar.setValue((player.getHP()*100/player.getmax_HP()));
        p_MPBar.setValue((player.getMP()*100/player.getmax_MP()));
        e_HPBar.setValue((target.getHP()*100/target.getmax_HP()));
        
       if(player.getHP()*100/player.getmax_HP() > 75)
        {p_HPBar.setForeground(new java.awt.Color(51, 153, 0));}
       else if(player.getHP()*100/player.getmax_HP() > 35)
        {p_HPBar.setForeground(new java.awt.Color(204, 204, 0));}
       else
        {p_HPBar.setForeground(new java.awt.Color(153, 0, 0));}
       
       if(target.getHP()*100/target.getmax_HP() > 75)
        {e_HPBar.setForeground(new java.awt.Color(51, 153, 0));}
       else if(target.getHP()*100/target.getmax_HP() > 35)
        {e_HPBar.setForeground(new java.awt.Color(204, 204, 0));}
       else
        {e_HPBar.setForeground(new java.awt.Color(153, 0, 0));}      
       
       System.out.println(player.getHP());
       System.out.println(target.getHP());
    }
    
    private void BPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BPlayActionPerformed
       new loadNew().execute();
       switchPanel("panelL");
    }//GEN-LAST:event_BPlayActionPerformed

    class loadNew extends SwingWorker<Integer, Integer>{
        @Override
        protected Integer doInBackground() throws Exception
        {   
            progress.setText("Reseting Timeline");
            resetRun();
            System.out.println("reset complete");
            progress.setText("Awaking the Player");
            player = new Player(1, 1, conn);
            progress.setText("Terrorizing the Forest");
            for(int i = 2; i <= (7+rnd.nextInt(3)); i++){
            target = new Enemy(player.getLvl(), i, conn);}
            System.out.println("entity making complete");
            progress.setText("Rebuilding the Forest");
            mapping = new Mapping(conn);
            mapping.GenerateRoom();
            progress.setText("Scattering the Terror");
            mapping.EnemyPlacing();
            System.out.println("mapping complete");
            return 1;
        }
        
        @Override
        protected void done(){
           try {
               BPlay.setIcon(new ImageIcon(start_button.getSubimage(500, 0, 250, 50)));
               switchPanel("panelA");
           } catch (Exception ignore) {
           } 
        }    
    }
    
    private void Attack_cActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Attack_cActionPerformed
        Attack.setVisible(true);
        Actions.setVisible(false);
    }//GEN-LAST:event_Attack_cActionPerformed

    private void Spell_cActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Spell_cActionPerformed
        Spell.setVisible(true);
        Actions.setVisible(false);
    }//GEN-LAST:event_Spell_cActionPerformed

    private void Cancel_AActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Cancel_AActionPerformed
        Attack.setVisible(false);
        Actions.setVisible(true);
    }//GEN-LAST:event_Cancel_AActionPerformed

    private void Cancel_SActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Cancel_SActionPerformed
        Spell.setVisible(false);
        Actions.setVisible(true);
    }//GEN-LAST:event_Cancel_SActionPerformed

    private void Normal_AActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Normal_AActionPerformed
        menu.attack(player, target, 1, conn);
        menu.attack(target, player, target.RollAttack(), conn);
        player.restoreMP();
        target.restoreMP();
        this.checkChange();
        Attack.setVisible(false);
        Actions.setVisible(true);
    }//GEN-LAST:event_Normal_AActionPerformed

    private void Swift_AActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Swift_AActionPerformed
        menu.attack(player, target, 3, conn);
        menu.attack(target, player, target.RollAttack(), conn);
        player.restoreMP();
        this.checkChange();
        Attack.setVisible(false);
        Actions.setVisible(true);
    }//GEN-LAST:event_Swift_AActionPerformed

    private void Heavy_AActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Heavy_AActionPerformed
        menu.attack(player, target, 2, conn);
        menu.attack(target, player, target.RollAttack(), conn);
        player.restoreMP();
        target.restoreMP();
        this.checkChange();
        Spell.setVisible(false);
        Actions.setVisible(true);
    }//GEN-LAST:event_Heavy_AActionPerformed

    private void Fire_SActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Fire_SActionPerformed
        menu.attack(player, target, 9, conn);
        menu.attack(target, player, target.RollAttack(), conn);
        player.restoreMP();
        this.checkChange();
        Spell.setVisible(false);
        Actions.setVisible(true);
    }//GEN-LAST:event_Fire_SActionPerformed

    private void Ice_SActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Ice_SActionPerformed
        menu.attack(player, target, 10, conn);
        menu.attack(target, player, target.RollAttack(), conn);
        player.restoreMP();
        target.restoreMP();
        this.checkChange();
        Spell.setVisible(false);
        Actions.setVisible(true);
    }//GEN-LAST:event_Ice_SActionPerformed

    private void Light_SActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Light_SActionPerformed
        menu.attack(player, target, 11, conn);
        menu.attack(target, player, target.RollAttack(), conn);
        player.restoreMP();
        target.restoreMP();
        this.checkChange();
        Spell.setVisible(false);
        Actions.setVisible(true);
    }//GEN-LAST:event_Light_SActionPerformed

    private void BLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BLoadActionPerformed
        progress.setText("Waking Up");
        switchPanel("panelL"); 
        new loadSave().execute();        
    }//GEN-LAST:event_BLoadActionPerformed

    class loadSave extends SwingWorker<Integer, Integer>{
        @Override
        protected Integer doInBackground() throws Exception
        {   
            player = new Player(conn);
            for(int i = 0; i < 20; i++){}
            return 1;
        }
        
        @Override
        protected void done(){
           try {
               BPlay.setIcon(new ImageIcon(start_button.getSubimage(500, 0, 250, 50)));
               switchPanel("panelA");
           } catch (Exception ignore) {
           } 
        }    
    }    
    
    private void ResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResetActionPerformed
       switchPanel("panelS");
    }//GEN-LAST:event_ResetActionPerformed

    private void close_rewardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_close_rewardActionPerformed
        switchPanel("panelA");
        new auto_save().execute();
        Reward.setVisible(false);
    }//GEN-LAST:event_close_rewardActionPerformed

    private class auto_save extends SwingWorker<Void,Void>{
        @Override
        protected Void doInBackground() throws Exception {
            player.updateData();
            return null;
        }
    }
    
    private void DefendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DefendActionPerformed
        player.setStr(player.getStr()+100);
        player.setInt(player.getInte()+100);
        menu.attack(target, player, target.RollAttack(), conn);
        player.restoreMP();
        target.restoreMP();
        this.checkChange();
        player.setStr(player.getStr()-100);
        player.setInt(player.getInte()-100);       
    }//GEN-LAST:event_DefendActionPerformed

    private void HealActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HealActionPerformed
        menu.attack(player, target, 17, conn);
        menu.attack(target, player, target.RollAttack(), conn);
        player.restoreMP();
        target.restoreMP();
        this.checkChange();
    }//GEN-LAST:event_HealActionPerformed

    public void switchPanel(String panel){
        panelSwitch = (CardLayout)Main_Window.getLayout();
        panelSwitch.show(Main_Window, panel);     
        System.out.println("changed to " + panel);
    }
    
    public class traverse extends AbstractAction{
        int move, direction, target_id, grid, skip;
        Boolean edge;
        String room;
        HashSet<Integer> bounds;
        ResultSet target_check;
        PreparedStatement prepCheck;
        
        public traverse(int move,int direction){
        this.direction = direction;
        this.move = move;
        switch(direction){
            case 1 : bounds = new HashSet<>(Arrays.asList(2, 3, 4, 5)); room = "up_Room"; skip = 56; break;
            case 2 : bounds = new HashSet<>(Arrays.asList(58, 59, 60, 61)); room = "bot_Room"; skip = -56; break;
            case 3 : bounds = new HashSet<>(Arrays.asList(16, 24, 32, 40)); room = "left_Room"; skip = 7; break;
            case 4 : bounds = new HashSet<>(Arrays.asList(23, 31, 39, 43)); room = "right_Room"; skip = -7; break;
        }
        }
        
        @Override
        public void actionPerformed(ActionEvent e) {
        try{        
        grid = player.getGrid();
        edge = bounds.contains(grid);
        System.out.println("movement direction - " + direction + " from " + grid);
        
        prepCheck = conn.prepareStatement("SELECT * FROM Entity WHERE grid = (?) AND room = (?)");
        prepCheck.setInt(1, grid+move);
        prepCheck.setInt(2, player.getRoom());
        target_check = prepCheck.executeQuery();        
        
        if(target_check.next() == true){
                if(target_check.getInt("Ent_ID") != 1){
                target_id = target_check.getInt("Ent_ID");                                
                target = new Enemy(target_id, conn);
                Combat_screen.repaint();
                Combat_screen.paintComponents(Combat_screen.getGraphics());
                E_Name.setText(target.getName());
                System.out.println("checked"); 
                checkChange();
                switchPanel("panelC");
                new combat_start().execute();
            }
        }                
                
        if(edge == true){
        System.out.println("test - " + grid);
        mover(grid, skip, 1);
        prepCheck = conn.prepareStatement("SELECT * FROM Rooms WHERE room_ID = (?)");
        prepCheck.setInt(1, player.getRoom());
        ResultSet next = prepCheck.executeQuery();
        
        switchPanel("panelL");
        player.setRoom(next.getInt(room));
        new updateMap().execute();                     
        }
        
        else{
        mover(grid, move, 0);
        }
        
        System.out.println("movement finish");
        }catch(SQLException ex){
            System.out.println("movement error");
            ex.printStackTrace();
        }
        }
        
    }
    
    private class updateMap extends SwingWorker<Integer,Integer>{
        @Override
        protected Integer doInBackground() throws Exception {
            progress.setText("Looking...");
            Map.repaint();
            People.repaint();
            return 0;
        }
        
        
        @Override
        protected void done(){
            switchPanel("panelA");
        }
    }
    
    private void mover(int grid, int move, int skip){       
        try{
        int i = 0;
        int j = grid - (i*8);
        
        while(j >= 8){
            i++;
            j = grid - (i*8);
        }
            
        PreparedStatement prepMove = conn.prepareStatement("SELECT is_Passable FROM Grid WHERE grid = (?)");
        prepMove.setInt(1, grid+move);
        ResultSet next = prepMove.executeQuery();
                            
        if(next.getBoolean("is_Passable") == true || skip == 1){                                   
            player.setGrid(grid+move);
            System.out.println("movement success to " + (move+grid));
        }
        }catch(SQLException ex){
            System.out.println("movement failed");
        }
    }
       
    private class combat_start extends SwingWorker<Integer,Integer>{
        volatile Boolean fight;
        @Override
        protected Integer doInBackground() throws Exception {
            
        int cond = 0;
        fight = true;
            
        while(fight == true){
        if(target.getHP() <= 0){
            cond = 1;
            fight = false;
        }
        else if (player.getHP() <= 0){
            cond = 2;
            fight = false;
        }
        }
        
        return cond;
        }
        
        @Override
        protected void done(){
            try {
                System.out.println(get());
                if(get() == 1){                                                                               
                    int calcR = target.GiveReward();
                    int rngR = rnd.nextInt(10);
                    
                    player.addEXP(calcR);
                    rewardList();
                    try{
                    PreparedStatement Deletion = conn.prepareStatement("DELETE FROM Entity WHERE Ent_ID = (?)");
                    Deletion.setInt(1, target.getID());
                    Deletion.executeUpdate();
                    }catch(SQLException ex){
                        ex.printStackTrace();
                    }                       
                    People.repaint();                   
                    System.out.println("combat finished");
                }
                
                else if(get() == 2){
                    switchPanel("panelD");
                }
                 
            } catch (Exception ignore) {
            } 
        }
    }
    
    private void rewardList(){
        expbar.setValue((player.getEXP()*100/player.getEXP_N()));
        exp_count.setText(player.getEXP() + " / " + player.getEXP_N());
        Reward.setVisible(true);
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Actions;
    private javax.swing.JPanel Adventure;
    private javax.swing.JPanel Attack;
    private javax.swing.JButton Attack_c;
    private javax.swing.JButton BExit;
    private javax.swing.JButton BLoad;
    private javax.swing.JButton BPlay;
    private javax.swing.JButton Cancel_A;
    private javax.swing.JButton Cancel_S;
    private javax.swing.JPanel Combat;
    private javax.swing.JPanel Combat_screen;
    private javax.swing.JPanel Dead;
    private javax.swing.JButton Defend;
    private javax.swing.JLabel E_Name;
    private javax.swing.JButton Esc;
    private javax.swing.JButton Fire_S;
    private javax.swing.JButton Heal;
    private javax.swing.JButton Heavy_A;
    private javax.swing.JButton Ice_S;
    private javax.swing.JButton Light_S;
    private javax.swing.JPanel Loading;
    private javax.swing.JPanel Main_Window;
    private javax.swing.JPanel Map;
    private javax.swing.JButton Normal_A;
    private javax.swing.JPanel People;
    private javax.swing.JPanel Player_loc;
    private javax.swing.JButton Reset;
    private javax.swing.JPanel Reward;
    private javax.swing.JPanel Spell;
    private javax.swing.JButton Spell_c;
    private javax.swing.JPanel Start;
    private javax.swing.JButton Swift_A;
    private javax.swing.JButton close_reward;
    private javax.swing.JProgressBar e_HPBar;
    private javax.swing.JLabel exp_count;
    private javax.swing.JProgressBar expbar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JProgressBar p_HPBar;
    private javax.swing.JProgressBar p_MPBar;
    private javax.swing.JLabel progress;
    // End of variables declaration//GEN-END:variables
}
